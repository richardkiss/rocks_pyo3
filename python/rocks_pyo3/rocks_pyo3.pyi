class DB:
    def __init__(self, path: str, create_if_missing: bool | None = None) -> None: ...
    def put(self, key: bytes, value: bytes) -> None: ...
    def get(self, key: bytes) -> bytes | None: ...
    def multi_get(self, keys: list[bytes]) -> list[bytes | None]: ...
    def delete(self, key: bytes) -> None: ...
    def iterator(self, direction: str = "forward") -> DBIterator: ...
    def iterate_from(self, key: bytes, direction: str = "forward") -> DBIterator: ...
    def write(self, batch: WriteBatch) -> None: ...
    def approximate_size(self) -> int: ...
    def put_str(self, key: str, value: str) -> None: ...

class DBIterator:
    def __iter__(self) -> DBIterator: ...
    def __next__(self) -> tuple[bytes, bytes] | None: ...

class WriteBatch:
    def __init__(self) -> None: ...
    def put(self, key: bytes, value: bytes) -> None: ...
    def delete(self, key: bytes) -> None: ...
    def write(self, db: DB) -> None: ...
